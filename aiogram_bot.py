import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from config import TELEGRAM_BOT_TOKEN, ADMIN_USERNAMES, bot_settings, WELCOME_MESSAGE

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# FSM States for admin panel
class AdminStates(StatesGroup):
    waiting_for_card = State()
    waiting_for_game_link = State()
    waiting_for_calendar_link = State()
    waiting_for_chat_link = State()
    waiting_for_moderator_link = State()
    waiting_for_charity_link = State()
    waiting_for_charity_description = State()

def get_main_menu_keyboard():
    """Create main menu keyboard with 6 buttons in 2 columns"""
    builder = ReplyKeyboardBuilder()
    
    # Row 1
    builder.add(KeyboardButton(text="üéØ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ"))
    builder.add(KeyboardButton(text="üéÆ –ù–∞–π–±–ª–∏–∂—á–∞ –≥—Ä–∞"))
    
    # Row 2
    builder.add(KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ –º—ñ—Å—è—Ü—å"))
    builder.add(KeyboardButton(text="üí¨ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç"))
    
    # Row 3
    builder.add(KeyboardButton(text="‚ùì –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"))
    builder.add(KeyboardButton(text="‚ù§Ô∏è –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å"))
    
    builder.adjust(2, 2, 2)  # 2 buttons per row
    return builder.as_markup(resize_keyboard=True)

def get_admin_menu_keyboard():
    """Create admin menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="üí≥ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏", callback_data="admin_card"))
    builder.add(InlineKeyboardButton(text="üéÆ –ó–º—ñ–Ω–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É", callback_data="admin_game"))
    builder.add(InlineKeyboardButton(text="üìÖ –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä", callback_data="admin_calendar"))
    builder.add(InlineKeyboardButton(text="üí¨ –ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç", callback_data="admin_chat"))
    builder.add(InlineKeyboardButton(text="‚ùì –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_moderator"))
    builder.add(InlineKeyboardButton(text="‚ù§Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å", callback_data="admin_charity"))
    builder.add(InlineKeyboardButton(text="üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_view"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="admin_back"))
    
    builder.adjust(1)
    return builder.as_markup()

def is_admin(username: str) -> bool:
    """Check if user is admin"""
    return username in ADMIN_USERNAMES

async def delete_and_send_message(message: types.Message, text: str, reply_markup=None):
    """Delete current message and send new one"""
    try:
        await message.delete()
    except:
        pass
    return await message.answer(text, reply_markup=reply_markup)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """Handle /start command"""
    await message.answer(
        WELCOME_MESSAGE,
        reply_markup=get_main_menu_keyboard()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    """Handle /admin command - only for authorized users"""
    if not message.from_user or not message.from_user.username or not is_admin(message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ.")
        return
    
    await message.answer(
        "üîß –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_admin_menu_keyboard()
    )

# Main menu handlers
@dp.message(F.text == "üéØ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –∫–≤—ñ–∑—ñ")
async def book_quiz_participation(message: types.Message):
    """Handle booking quiz participation"""
    text = f"üí≥ –î–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—á–∞—Å—Ç—ñ —É –∫–≤—ñ–∑—ñ –ø–µ—Ä–µ–≤–µ–¥—ñ—Ç—å –∫–æ—à—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–∫—É:\n\n<code>{bot_settings.payment_card}</code>\n\nüí° –ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
    await delete_and_send_message(message, text, get_main_menu_keyboard())

@dp.message(F.text == "üéÆ –ù–∞–π–±–ª–∏–∂—á–∞ –≥—Ä–∞")
async def next_game_info(message: types.Message):
    """Handle next game info"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üéÆ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó", url=bot_settings.next_game_link))
    
    text = "üéÆ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞–π–±–ª–∏–∂—á—É –≥—Ä—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ:"
    await delete_and_send_message(message, text, builder.as_markup())

@dp.message(F.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ –º—ñ—Å—è—Ü—å")
async def monthly_calendar(message: types.Message):
    """Handle monthly calendar"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä", url=bot_settings.calendar_link))
    
    text = "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä —ñ–≥–æ—Ä –Ω–∞ –º—ñ—Å—è—Ü—å:"
    await delete_and_send_message(message, text, builder.as_markup())

@dp.message(F.text == "üí¨ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç")
async def general_chat(message: types.Message):
    """Handle general chat"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üí¨ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —á–∞—Ç—É", url=bot_settings.general_chat_link))
    
    text = "üí¨ –ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —á–∞—Ç—É:"
    await delete_and_send_message(message, text, builder.as_markup())

@dp.message(F.text == "‚ùì –ü–∏—Ç–∞–Ω–Ω—è –¥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
async def moderator_questions(message: types.Message):
    """Handle moderator questions"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùì –ù–∞–ø–∏—Å–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É", url=bot_settings.moderator_link))
    
    text = "‚ùì –Ø–∫—â–æ —É –≤–∞—Å —î –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:"
    await delete_and_send_message(message, text, builder.as_markup())

@dp.message(F.text == "‚ù§Ô∏è –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å")
async def charity_info(message: types.Message):
    """Handle charity info"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ù§Ô∏è –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏", url=bot_settings.charity_link))
    
    text = "‚ù§Ô∏è –°–±–æ—Ä –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –≤—á –∞4699"
    await delete_and_send_message(message, text, builder.as_markup())

# Admin panel callback handlers
@dp.callback_query(F.data == "admin_back")
async def admin_back_to_main(callback: types.CallbackQuery):
    """Return to main menu from admin panel"""
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            WELCOME_MESSAGE,
            reply_markup=None
        )
        await callback.message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "admin_view")
async def admin_view_settings(callback: types.CallbackQuery):
    """View all current settings"""
    settings = bot_settings.get_all_settings()
    
    text = "üìä –ü–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n"
    text += f"üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: <code>{settings['payment_card']}</code>\n"
    text += f"üéÆ –ù–∞—Å—Ç—É–ø–Ω–∞ –≥—Ä–∞: {settings['next_game_link']}\n"
    text += f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä: {settings['calendar_link']}\n"
    text += f"üí¨ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç: {settings['general_chat_link']}\n"
    text += f"‚ùì –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {settings['moderator_link']}\n"
    text += f"‚ù§Ô∏è –ë–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å: {settings['charity_link']}\n"
    text += f"üìù –û–ø–∏—Å –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—Å—Ç—ñ: {settings['charity_description']}"
    
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(text, reply_markup=get_admin_menu_keyboard())
    await callback.answer()

@dp.callback_query(F.data == "admin_card")
async def admin_change_card(callback: types.CallbackQuery, state: FSMContext):
    """Start changing payment card"""
    await state.set_state(AdminStates.waiting_for_card)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"üí≥ –ü–æ—Ç–æ—á–Ω–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: <code>{bot_settings.payment_card}</code>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:",
            reply_markup=None
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_game")
async def admin_change_game(callback: types.CallbackQuery, state: FSMContext):
    """Start changing game link"""
    await state.set_state(AdminStates.waiting_for_game_link)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"üéÆ –ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É: {bot_settings.next_game_link}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=None
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_calendar")
async def admin_change_calendar(callback: types.CallbackQuery, state: FSMContext):
    """Start changing calendar link"""
    await state.set_state(AdminStates.waiting_for_calendar_link)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"üìÖ –ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä: {bot_settings.calendar_link}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=None
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_chat")
async def admin_change_chat(callback: types.CallbackQuery, state: FSMContext):
    """Start changing chat link"""
    await state.set_state(AdminStates.waiting_for_chat_link)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"üí¨ –ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç: {bot_settings.general_chat_link}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=None
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_moderator")
async def admin_change_moderator(callback: types.CallbackQuery, state: FSMContext):
    """Start changing moderator link"""
    await state.set_state(AdminStates.waiting_for_moderator_link)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"‚ùì –ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {bot_settings.moderator_link}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=None
        )
    await callback.answer()

@dp.callback_query(F.data == "admin_charity")
async def admin_change_charity(callback: types.CallbackQuery, state: FSMContext):
    """Start changing charity settings"""
    await state.set_state(AdminStates.waiting_for_charity_link)
    if callback.message and hasattr(callback.message, 'edit_text'):
        await callback.message.edit_text(
            f"‚ù§Ô∏è –ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å: {bot_settings.charity_link}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
            reply_markup=None
        )
    await callback.answer()

# State handlers for admin inputs
@dp.message(StateFilter(AdminStates.waiting_for_card))
async def process_card_input(message: types.Message, state: FSMContext):
    """Process new payment card input"""
    if message.text:
        bot_settings.payment_card = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ: <code>{bot_settings.payment_card}</code>",
            reply_markup=get_admin_menu_keyboard()
        )

@dp.message(StateFilter(AdminStates.waiting_for_game_link))
async def process_game_link_input(message: types.Message, state: FSMContext):
    """Process new game link input"""
    if message.text:
        bot_settings.next_game_link = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.next_game_link}",
            reply_markup=get_admin_menu_keyboard()
        )

@dp.message(StateFilter(AdminStates.waiting_for_calendar_link))
async def process_calendar_link_input(message: types.Message, state: FSMContext):
    """Process new calendar link input"""
    if message.text:
        bot_settings.calendar_link = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.calendar_link}",
            reply_markup=get_admin_menu_keyboard()
        )

@dp.message(StateFilter(AdminStates.waiting_for_chat_link))
async def process_chat_link_input(message: types.Message, state: FSMContext):
    """Process new chat link input"""
    if message.text:
        bot_settings.general_chat_link = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —á–∞—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.general_chat_link}",
            reply_markup=get_admin_menu_keyboard()
        )

@dp.message(StateFilter(AdminStates.waiting_for_moderator_link))
async def process_moderator_link_input(message: types.Message, state: FSMContext):
    """Process new moderator link input"""
    if message.text:
        bot_settings.moderator_link = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.moderator_link}",
            reply_markup=get_admin_menu_keyboard()
        )

@dp.message(StateFilter(AdminStates.waiting_for_charity_link))
async def process_charity_link_input(message: types.Message, state: FSMContext):
    """Process new charity link input"""
    if message.text:
        bot_settings.charity_link = message.text.strip()
        await state.set_state(AdminStates.waiting_for_charity_description)
        await message.answer(
            f"‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–ª–∞–≥–æ–¥—ñ–π–Ω—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.charity_link}\n\n–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—Å—Ç—ñ:"
        )

@dp.message(StateFilter(AdminStates.waiting_for_charity_description))
async def process_charity_description_input(message: types.Message, state: FSMContext):
    """Process new charity description input"""
    if message.text:
        bot_settings.charity_description = message.text.strip()
        await state.clear()
        await message.answer(
            f"‚úÖ –û–ø–∏—Å –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—Å—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ: {bot_settings.charity_description}",
            reply_markup=get_admin_menu_keyboard()
        )

async def main():
    """Main function to start the bot"""
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())